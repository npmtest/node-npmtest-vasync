{"/home/travis/build/npmtest/node-npmtest-vasync/test.js":"/* istanbul instrument in package npmtest_vasync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vasync/lib.npmtest_vasync.js":"/* istanbul instrument in package npmtest_vasync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vasync = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vasync = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vasync/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vasync && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vasync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vasync\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vasync.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_vasync.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vasync.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_vasync.__dirname +\n                    '/lib.npmtest_vasync.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vasync/vasync/lib/vasync.js":"/*\n * vasync.js: utilities for observable asynchronous control flow\n */\n\nvar mod_assert = require('assert');\nvar mod_events = require('events');\nvar mod_util = require('util');\nvar mod_verror = require('verror');\n\n/*\n * Public interface\n */\nexports.parallel = parallel;\nexports.forEachParallel = forEachParallel;\nexports.pipeline = pipeline;\nexports.forEachPipeline = forEachPipeline;\nexports.queue = queue;\nexports.queuev = queuev;\nexports.barrier = barrier;\nexports.waterfall = waterfall;\n\nif (!global.setImmediate) {\n\tglobal.setImmediate = function (func) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\targs.unshift(0);\n\t\targs.unshift(func);\n\t\tsetTimeout.apply(this, args);\n\t};\n}\n\n/*\n * This is incorporated here from jsprim because jsprim ends up pulling in a lot\n * of dependencies.  If we end up needing more from jsprim, though, we should\n * add it back and rip out this function.\n */\nfunction isEmpty(obj)\n{\n\tvar key;\n\tfor (key in obj)\n\t\treturn (false);\n\treturn (true);\n}\n\n/*\n * Given a set of functions that complete asynchronously using the standard\n * callback(err, result) pattern, invoke them all and merge the results.  See\n * README.md for details.\n */\nfunction parallel(args, callback)\n{\n\tvar funcs, rv, doneOne, i;\n\n\tmod_assert.equal(typeof (args), 'object', '\"args\" must be an object');\n\tmod_assert.ok(Array.isArray(args['funcs']),\n\t    '\"args.funcs\" must be specified and must be an array');\n\tmod_assert.equal(typeof (callback), 'function',\n\t    'callback argument must be specified and must be a function');\n\n\tfuncs = args['funcs'].slice(0);\n\n\trv = {\n\t    'operations': new Array(funcs.length),\n\t    'successes': [],\n\t    'ndone': 0,\n\t    'nerrors': 0\n\t};\n\n\tif (funcs.length === 0) {\n\t\tsetImmediate(function () { callback(null, rv); });\n\t\treturn (rv);\n\t}\n\n\tdoneOne = function (entry) {\n\t\treturn (function (err, result) {\n\t\t\tmod_assert.equal(entry['status'], 'pending');\n\n\t\t\tentry['err'] = err;\n\t\t\tentry['result'] = result;\n\t\t\tentry['status'] = err ? 'fail' : 'ok';\n\n\t\t\tif (err)\n\t\t\t\trv['nerrors']++;\n\t\t\telse\n\t\t\t\trv['successes'].push(result);\n\n\t\t\tif (++rv['ndone'] < funcs.length)\n\t\t\t\treturn;\n\n\t\t\tvar errors = rv['operations'].filter(function (ent) {\n\t\t\t\treturn (ent['status'] == 'fail');\n\t\t\t}).map(function (ent) { return (ent['err']); });\n\n\t\t\tif (errors.length > 0)\n\t\t\t\tcallback(new mod_verror.MultiError(errors), rv);\n\t\t\telse\n\t\t\t\tcallback(null, rv);\n\t\t});\n\t};\n\n\tfor (i = 0; i < funcs.length; i++) {\n\t\trv['operations'][i] = {\n\t\t\t'func': funcs[i],\n\t\t\t'funcname': funcs[i].name || '(anon)',\n\t\t\t'status': 'pending'\n\t\t};\n\n\t\tfuncs[i](doneOne(rv['operations'][i]));\n\t}\n\n\treturn (rv);\n}\n\n/*\n * Exactly like parallel, except that the input is specified as a single\n * function to invoke on N different inputs (rather than N functions).  \"args\"\n * must have the following fields:\n *\n *\tfunc\t\tasynchronous function to invoke on each input value\n *\n *\tinputs\t\tarray of input values\n */\nfunction forEachParallel(args, callback)\n{\n\tvar func, funcs;\n\n\tmod_assert.equal(typeof (args), 'object', '\"args\" must be an object');\n\tmod_assert.equal(typeof (args['func']), 'function',\n\t    '\"args.func\" must be specified and must be a function');\n\tmod_assert.ok(Array.isArray(args['inputs']),\n\t    '\"args.inputs\" must be specified and must be an array');\n\n\tfunc = args['func'];\n\tfuncs = args['inputs'].map(function (input) {\n\t\treturn (function (subcallback) {\n\t\t\treturn (func(input, subcallback));\n\t\t});\n\t});\n\n\treturn (parallel({ 'funcs': funcs }, callback));\n}\n\n/*\n * Like parallel, but invokes functions in sequence rather than in parallel\n * and aborts if any function exits with failure.  Arguments include:\n *\n *    funcs\tinvoke the functions in parallel\n *\n *    arg\tfirst argument to each pipeline function\n */\nfunction pipeline(args, callback)\n{\n\tvar funcs, uarg, rv, next;\n\n\tmod_assert.equal(typeof (args), 'object', '\"args\" must be an object');\n\tmod_assert.ok(Array.isArray(args['funcs']),\n\t    '\"args.funcs\" must be specified and must be an array');\n\n\tfuncs = args['funcs'].slice(0);\n\tuarg = args['arg'];\n\n\trv = {\n\t    'operations': funcs.map(function (func) {\n\t\treturn ({\n\t\t    'func': func,\n\t\t    'funcname': func.name || '(anon)',\n\t\t    'status': 'waiting'\n\t\t});\n\t    }),\n\t    'successes': [],\n\t    'ndone': 0,\n\t    'nerrors': 0\n\t};\n\n\tif (funcs.length === 0) {\n\t\tsetImmediate(function () { callback(null, rv); });\n\t\treturn (rv);\n\t}\n\n\tnext = function (err, result) {\n\t\tif (rv['nerrors'] > 0 ||\n\t\t    rv['ndone'] >= rv['operations'].length) {\n\t\t\tthrow new mod_verror.VError('pipeline callback ' +\n\t\t\t    'invoked after the pipeline has already ' +\n\t\t\t    'completed (%j)', rv);\n\t\t}\n\n\t\tvar entry = rv['operations'][rv['ndone']++];\n\n\t\tmod_assert.equal(entry['status'], 'pending');\n\n\t\tentry['status'] = err ? 'fail' : 'ok';\n\t\tentry['err'] = err;\n\t\tentry['result'] = result;\n\n\t\tif (err)\n\t\t\trv['nerrors']++;\n\t\telse\n\t\t\trv['successes'].push(result);\n\n\t\tif (err || rv['ndone'] == funcs.length) {\n\t\t\tcallback(err, rv);\n\t\t} else {\n\t\t\tvar nextent = rv['operations'][rv['ndone']];\n\t\t\tnextent['status'] = 'pending';\n\n\t\t\t/*\n\t\t\t * We invoke the next function on the next tick so that\n\t\t\t * the caller (stage N) need not worry about the case\n\t\t\t * that the next stage (stage N + 1) runs in its own\n\t\t\t * context.\n\t\t\t */\n\t\t\tsetImmediate(function () {\n\t\t\t\tnextent['func'](uarg, next);\n\t\t\t});\n\t\t}\n\t};\n\n\trv['operations'][0]['status'] = 'pending';\n\tfuncs[0](uarg, next);\n\n\treturn (rv);\n}\n\n/*\n * Exactly like pipeline, except that the input is specified as a single\n * function to invoke on N different inputs (rather than N functions).  \"args\"\n * must have the following fields:\n *\n *\tfunc\t\tasynchronous function to invoke on each input value\n *\n *\tinputs\t\tarray of input values\n */\nfunction forEachPipeline(args, callback) {\n    mod_assert.equal(typeof (args), 'object', '\"args\" must be an object');\n    mod_assert.equal(typeof (args['func']), 'function',\n\t\t'\"args.func\" must be specified and must be a function');\n    mod_assert.ok(Array.isArray(args['inputs']),\n\t\t'\"args.inputs\" must be specified and must be an array');\n    mod_assert.equal(typeof (callback), 'function',\n\t\t'callback argument must be specified and must be a function');\n\n    var func = args['func'];\n\n    var funcs = args['inputs'].map(function (input) {\n\t\treturn (function (_, subcallback) {\n\t\t\treturn (func(input, subcallback));\n\t\t});\n    });\n\n    return (pipeline({'funcs': funcs}, callback));\n}\n\n\n/*\n * async-compatible \"queue\" function.\n */\nfunction queue(worker, concurrency)\n{\n\treturn (new WorkQueue({\n\t    'worker': worker,\n\t    'concurrency': concurrency\n\t}));\n}\n\nfunction queuev(args)\n{\n\treturn (new WorkQueue(args));\n}\n\nfunction WorkQueue(args)\n{\n\tmod_assert.ok(args.hasOwnProperty('worker'));\n\tmod_assert.equal(typeof (args['worker']), 'function');\n\tmod_assert.ok(args.hasOwnProperty('concurrency'));\n\tmod_assert.equal(typeof (args['concurrency']), 'number');\n\tmod_assert.equal(Math.floor(args['concurrency']), args['concurrency']);\n\tmod_assert.ok(args['concurrency'] > 0);\n\n\tmod_events.EventEmitter.call(this);\n\n\tthis.nextid = 0;\n\tthis.worker = args['worker'];\n\tthis.worker_name = args['worker'].name || 'anon';\n\tthis.npending = 0;\n\tthis.pending = {};\n\tthis.queued = [];\n\tthis.closed = false;\n\tthis.ended = false;\n\n\t/* user-settable fields inherited from \"async\" interface */\n\tthis.concurrency = args['concurrency'];\n\tthis.saturated = undefined;\n\tthis.empty = undefined;\n\tthis.drain = undefined;\n}\n\nmod_util.inherits(WorkQueue, mod_events.EventEmitter);\n\nWorkQueue.prototype.push = function (tasks, callback)\n{\n\tif (!Array.isArray(tasks))\n\t\treturn (this.pushOne(tasks, callback));\n\n\tvar wq = this;\n\treturn (tasks.map(function (task) {\n\t    return (wq.pushOne(task, callback));\n\t}));\n};\n\nWorkQueue.prototype.updateConcurrency = function (concurrency)\n{\n\tif (this.closed)\n\t\tthrow new mod_verror.VError(\n\t\t\t'update concurrency invoked after queue closed');\n\tthis.concurrency = concurrency;\n\tthis.dispatchNext();\n};\n\nWorkQueue.prototype.close = function ()\n{\n\tvar wq = this;\n\n\tif (wq.closed)\n\t\treturn;\n\twq.closed = true;\n\n\t/*\n\t * If the queue is already empty, just fire the \"end\" event on the\n\t * next tick.\n\t */\n\tif (wq.npending === 0 && wq.queued.length === 0) {\n\t\tsetImmediate(function () {\n\t\t\tif (!wq.ended) {\n\t\t\t\twq.ended = true;\n\t\t\t\twq.emit('end');\n\t\t\t}\n\t\t});\n\t}\n};\n\n/* private */\nWorkQueue.prototype.pushOne = function (task, callback)\n{\n\tif (this.closed)\n\t\tthrow new mod_verror.VError('push invoked after queue closed');\n\n\tvar id = ++this.nextid;\n\tvar entry = { 'id': id, 'task': task, 'callback': callback };\n\n\tthis.queued.push(entry);\n\tthis.dispatchNext();\n\n\treturn (id);\n};\n\n/* private */\nWorkQueue.prototype.dispatchNext = function ()\n{\n\tvar wq = this;\n\tif (wq.npending === 0 && wq.queued.length === 0) {\n\t\tif (wq.drain)\n\t\t\twq.drain();\n\t\twq.emit('drain');\n\t\t/*\n\t\t * The queue is closed; emit the final \"end\"\n\t\t * event before we come to rest:\n\t\t */\n\t\tif (wq.closed) {\n\t\t\twq.ended = true;\n\t\t\twq.emit('end');\n\t\t}\n\t} else if (wq.queued.length > 0) {\n\t\twhile (wq.queued.length > 0 && wq.npending < wq.concurrency) {\n\t\t\tvar next = wq.queued.shift();\n\t\t\twq.dispatch(next);\n\n\t\t\tif (wq.queued.length === 0) {\n\t\t\t\tif (wq.empty)\n\t\t\t\t\twq.empty();\n\t\t\t\twq.emit('empty');\n\t\t\t}\n\t\t}\n\t}\n};\n\nWorkQueue.prototype.dispatch = function (entry)\n{\n\tvar wq = this;\n\n\tmod_assert.ok(!this.pending.hasOwnProperty(entry['id']));\n\tmod_assert.ok(this.npending < this.concurrency);\n\tmod_assert.ok(!this.ended);\n\n\tthis.npending++;\n\tthis.pending[entry['id']] = entry;\n\n\tif (this.npending === this.concurrency) {\n\t\tif (this.saturated)\n\t\t\tthis.saturated();\n\t\tthis.emit('saturated');\n\t}\n\n\t/*\n\t * We invoke the worker function on the next tick so that callers can\n\t * always assume that the callback is NOT invoked during the call to\n\t * push() even if the queue is not at capacity.  It also avoids O(n)\n\t * stack usage when used with synchronous worker functions.\n\t */\n\tsetImmediate(function () {\n\t\twq.worker(entry['task'], function (err) {\n\t\t\t--wq.npending;\n\t\t\tdelete (wq.pending[entry['id']]);\n\n\t\t\tif (entry['callback'])\n\t\t\t\tentry['callback'].apply(null, arguments);\n\n\t\t\twq.dispatchNext();\n\t\t});\n\t});\n};\n\nWorkQueue.prototype.length = function ()\n{\n\treturn (this.queued.length);\n};\n\nWorkQueue.prototype.kill = function ()\n{\n\tthis.killed = true;\n\tthis.queued = [];\n\tthis.drain = undefined;\n\tthis.close();\n};\n\n/*\n * Barriers coordinate multiple concurrent operations.\n */\nfunction barrier(args)\n{\n\treturn (new Barrier(args));\n}\n\nfunction Barrier(args)\n{\n\tmod_assert.ok(!args || !args['nrecent'] ||\n\t    typeof (args['nrecent']) == 'number',\n\t    '\"nrecent\" must have type \"number\"');\n\n\tmod_events.EventEmitter.call(this);\n\n\tvar nrecent = args && args['nrecent'] ? args['nrecent'] : 10;\n\n\tif (nrecent > 0) {\n\t\tthis.nrecent = nrecent;\n\t\tthis.recent = [];\n\t}\n\n\tthis.pending = {};\n\tthis.scheduled = false;\n}\n\nmod_util.inherits(Barrier, mod_events.EventEmitter);\n\nBarrier.prototype.start = function (name)\n{\n\tmod_assert.ok(!this.pending.hasOwnProperty(name),\n\t    'operation \"' + name + '\" is already pending');\n\tthis.pending[name] = Date.now();\n};\n\nBarrier.prototype.done = function (name)\n{\n\tmod_assert.ok(this.pending.hasOwnProperty(name),\n\t    'operation \"' + name + '\" is not pending');\n\n\tif (this.recent) {\n\t\tthis.recent.push({\n\t\t    'name': name,\n\t\t    'start': this.pending[name],\n\t\t    'done': Date.now()\n\t\t});\n\n\t\tif (this.recent.length > this.nrecent)\n\t\t\tthis.recent.shift();\n\t}\n\n\tdelete (this.pending[name]);\n\n\t/*\n\t * If we executed at least one operation and we're now empty, we should\n\t * emit \"drain\".  But most code doesn't deal well with events being\n\t * processed while they're executing, so we actually schedule this event\n\t * for the next tick.\n\t *\n\t * We use the \"scheduled\" flag to avoid emitting multiple \"drain\" events\n\t * on consecutive ticks if the user starts and ends another task during\n\t * this tick.\n\t */\n\tif (!isEmpty(this.pending) || this.scheduled)\n\t\treturn;\n\n\tthis.scheduled = true;\n\n\tvar self = this;\n\n\tsetImmediate(function () {\n\t\tself.scheduled = false;\n\n\t\t/*\n\t\t * It's also possible that the user has started another task on\n\t\t * the previous tick, in which case we really shouldn't emit\n\t\t * \"drain\".\n\t\t */\n\t\tif (isEmpty(self.pending))\n\t\t\tself.emit('drain');\n\t});\n};\n\n/*\n * waterfall([ funcs ], callback): invoke each of the asynchronous functions\n * \"funcs\" in series.  Each function is passed any values emitted by the\n * previous function (none for the first function), followed by the callback to\n * invoke upon completion.  This callback must be invoked exactly once,\n * regardless of success or failure.  As conventional in Node, the first\n * argument to the callback indicates an error (if non-null).  Subsequent\n * arguments are passed to the next function in the \"funcs\" chain.\n *\n * If any function fails (i.e., calls its callback with an Error), then the\n * remaining functions are not invoked and \"callback\" is invoked with the error.\n *\n * The only difference between waterfall() and pipeline() are the arguments\n * passed to each function in the chain.  pipeline() always passes the same\n * argument followed by the callback, while waterfall() passes whatever values\n * were emitted by the previous function followed by the callback.\n */\nfunction waterfall(funcs, callback)\n{\n\tvar rv, current, next;\n\n\tmod_assert.ok(Array.isArray(funcs));\n\tmod_assert.ok(arguments.length == 1 || typeof (callback) == 'function');\n\tfuncs = funcs.slice(0);\n\n\trv = {\n\t    'operations': funcs.map(function (func) {\n\t        return ({\n\t\t    'func': func,\n\t\t    'funcname': func.name || '(anon)',\n\t\t    'status': 'waiting'\n\t\t});\n\t    }),\n\t    'successes': [],\n\t    'ndone': 0,\n\t    'nerrors': 0\n\t};\n\n\tif (funcs.length === 0) {\n\t\tif (callback)\n\t\t\tsetImmediate(function () { callback(null, rv); });\n\t\treturn (rv);\n\t}\n\n\tnext = function (idx, err) {\n\t\tvar args, entry, nextentry;\n\n\t\tif (err === undefined)\n\t\t\terr = null;\n\n\t\tif (idx != current) {\n\t\t\tthrow (new mod_verror.VError(\n\t\t\t    'vasync.waterfall: function %d (\"%s\") invoked ' +\n\t\t\t    'its callback twice', idx,\n\t\t\t    rv['operations'][idx].funcname));\n\t\t}\n\n\t\tmod_assert.equal(idx, rv['ndone']);\n\t\tentry = rv['operations'][rv['ndone']++];\n\t\targs = Array.prototype.slice.call(arguments, 2);\n\n\t\tmod_assert.equal(entry['status'], 'pending');\n\t\tentry['status'] = err ? 'fail' : 'ok';\n\t\tentry['err'] = err;\n\t\tentry['results'] = args;\n\n\t\tif (err)\n\t\t\trv['nerrors']++;\n\t\telse\n\t\t\trv['successes'].push(args);\n\n\t\tif (err || rv['ndone'] == funcs.length) {\n\t\t\tif (callback) {\n\t\t\t\targs.unshift(err);\n\t\t\t\tcallback.apply(null, args);\n\t\t\t}\n\t\t} else {\n\t\t\tnextentry = rv['operations'][rv['ndone']];\n\t\t\tnextentry['status'] = 'pending';\n\t\t\tcurrent++;\n\t\t\targs.push(next.bind(null, current));\n\t\t\tsetImmediate(function () {\n\t\t\t\tnextentry['func'].apply(null, args);\n\t\t\t});\n\t\t}\n\t};\n\n\trv['operations'][0]['status'] = 'pending';\n\tcurrent = 0;\n\tfuncs[0](next.bind(null, current));\n\treturn (rv);\n}\n"}